<launch>

  <env name="GAZEBO_MODEL_PATH" value="$(find kth_navigation)/models:$(find fetch_gazebo)/models:$(optenv GAZEBO_MODEL_PATH)" />
  <arg name="move_base_include" default="$(find fetch_navigation)/launch/include/move_base.launch.xml" />
  <arg name="amcl_include" default="$(find fetch_navigation)/launch/include/amcl.launch.xml" />
  <arg name="world" default="$(find kth_navigation)/worlds/$(optenv KTH_WORLD).world" />
  <arg name="robot" default="fetch"/>
  <arg name="debug" default="false"/>
  <arg name="gui" default="false"/>
  <arg name="headless" default="true"/>
  <param name="use_sim_time" value="true" />
  <arg name="map_file" value="$(find kth_navigation)/maps/$(optenv KTH_WORLD)/map.yaml" />

  <!-- Start Gazebo with a blank world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="headless" value="$(arg headless)"/>
    <arg name="world_name" value="$(arg world)"/>
  </include>

  <include file="$(arg amcl_include)" />
  <include file="$(arg move_base_include)" >
    <arg name="name" value="fetch" />
  </include>

  <!-- Oh, you wanted a robot? -->
  <include file="$(find fetch_gazebo)/launch/include/$(arg robot).launch.xml" />

  <node pkg="kth_navigation" type="explore_map.py" name="explorer" output="screen" required="true">
    <param name="goals_file" value="$(find kth_navigation)/goals/$(optenv KTH_WORLD)/goals.yaml" />
  </node>

  <node pkg="map_server" type="map_server" name="map_server" args="$(arg map_file)"/>
  <node name="amcl_pose_server" pkg="kth_navigation" type="pose_server.py" />
  <!-- <node pkg="rviz" type="rviz" name="rviz" /> -->
  <node pkg="rosbag" type="record" name="rosbag_record" args="record -O /tmp/$(optenv KTH_WORLD).bag /tf /base_scan /tf_static" output="screen"/>
  <!-- <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping" output="screen" >
    <param name="map_frame" value="slam_map" />
    <param name="base_frame" value="slam_base_link"/>
    <param name="odom_frame" value="slam_odom" />
    <remap from="scan" to="base_scan" />
    <remap from="map" to="slam_map" />
    <remap from="map_metadata" to="slam_map_metadata" />
  </node> -->

  <!-- <node pkg="tf" type="tf_remap" name="tf_remap" >
    <param name="mappings" value="[ {odom: slam_odom}, {base_link: slam_base_link}, {laser_link: slam_laser_link} ]" />
  </node> -->


</launch>
